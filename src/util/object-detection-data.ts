/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

import { GeneralObject } from './general-object'

export class ObjectDetectionData {
  bb: flatbuffers.ByteBuffer|null = null
  bb_pos = 0
  __init (i:number, bb:flatbuffers.ByteBuffer):ObjectDetectionData {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsObjectDetectionData (bb:flatbuffers.ByteBuffer, obj?:ObjectDetectionData):ObjectDetectionData {
    return (obj || new ObjectDetectionData()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsObjectDetectionData (bb:flatbuffers.ByteBuffer, obj?:ObjectDetectionData):ObjectDetectionData {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new ObjectDetectionData()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  objectDetectionList (index: number, obj?:GeneralObject):GeneralObject|null {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? (obj || new GeneralObject()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null
  }

  objectDetectionListLength ():number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0
  }

  static startObjectDetectionData (builder:flatbuffers.Builder) {
    builder.startObject(1)
  }

  static addObjectDetectionList (builder:flatbuffers.Builder, objectDetectionListOffset:flatbuffers.Offset) {
    builder.addFieldOffset(0, objectDetectionListOffset, 0)
  }

  static createObjectDetectionListVector (builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
    builder.startVector(4, data.length, 4)
    for (let i = data.length - 1; i >= 0; i--) {
      builder.addOffset(data[i]!)
    }
    return builder.endVector()
  }

  static startObjectDetectionListVector (builder:flatbuffers.Builder, numElems:number) {
    builder.startVector(4, numElems, 4)
  }

  static endObjectDetectionData (builder:flatbuffers.Builder):flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createObjectDetectionData (builder:flatbuffers.Builder, objectDetectionListOffset:flatbuffers.Offset):flatbuffers.Offset {
    ObjectDetectionData.startObjectDetectionData(builder)
    ObjectDetectionData.addObjectDetectionList(builder, objectDetectionListOffset)
    return ObjectDetectionData.endObjectDetectionData(builder)
  }
}
