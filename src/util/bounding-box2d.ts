/*
 * Copyright 2023 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers'

export class BoundingBox2d {
  bb: flatbuffers.ByteBuffer|null = null
  bb_pos = 0
  __init (i:number, bb:flatbuffers.ByteBuffer):BoundingBox2d {
    this.bb_pos = i
    this.bb = bb
    return this
  }

  static getRootAsBoundingBox2d (bb:flatbuffers.ByteBuffer, obj?:BoundingBox2d):BoundingBox2d {
    return (obj || new BoundingBox2d()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  static getSizePrefixedRootAsBoundingBox2d (bb:flatbuffers.ByteBuffer, obj?:BoundingBox2d):BoundingBox2d {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH)
    return (obj || new BoundingBox2d()).__init(bb.readInt32(bb.position()) + bb.position(), bb)
  }

  left ():number {
    const offset = this.bb!.__offset(this.bb_pos, 4)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  top ():number {
    const offset = this.bb!.__offset(this.bb_pos, 6)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  right ():number {
    const offset = this.bb!.__offset(this.bb_pos, 8)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  bottom ():number {
    const offset = this.bb!.__offset(this.bb_pos, 10)
    return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0
  }

  static startBoundingBox2d (builder:flatbuffers.Builder) {
    builder.startObject(4)
  }

  static addLeft (builder:flatbuffers.Builder, left:number) {
    builder.addFieldInt32(0, left, 0)
  }

  static addTop (builder:flatbuffers.Builder, top:number) {
    builder.addFieldInt32(1, top, 0)
  }

  static addRight (builder:flatbuffers.Builder, right:number) {
    builder.addFieldInt32(2, right, 0)
  }

  static addBottom (builder:flatbuffers.Builder, bottom:number) {
    builder.addFieldInt32(3, bottom, 0)
  }

  static endBoundingBox2d (builder:flatbuffers.Builder):flatbuffers.Offset {
    const offset = builder.endObject()
    return offset
  }

  static createBoundingBox2d (builder:flatbuffers.Builder, left:number, top:number, right:number, bottom:number):flatbuffers.Offset {
    BoundingBox2d.startBoundingBox2d(builder)
    BoundingBox2d.addLeft(builder, left)
    BoundingBox2d.addTop(builder, top)
    BoundingBox2d.addRight(builder, right)
    BoundingBox2d.addBottom(builder, bottom)
    return BoundingBox2d.endBoundingBox2d(builder)
  }
}
